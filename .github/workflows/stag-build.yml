# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js Build

on:
  push:
    branches:
      - main

env:
  SERVICE_NAME: meal
  SERVICE_TYPE: be

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
    
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Get branch name
      run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr /# -)" >> $GITHUB_ENV

    - name: Build and Push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{secrets.DOCKER_USER}}/${{env.SERVICE_NAME}}-${{env.SERVICE_TYPE}}:${{ github.sha }}
        build-args : |
          DATABASE_HOST=${{secrets.DATABASE_HOST_STAGE}}
          DATABASE_PORT=${{secrets.DATABASE_PORT_STAGE}}
          DATABASE_USERNAME=${{secrets.DATABASE_USERNAME_STAGE}}
          DATABASE_PASSWORD=${{secrets.DATABASE_PASSWORD_STAGE}}
          DATABASE_NAME=${{secrets.DATABASE_NAME_STAGE}}
          DATABASE_SYNCHRONIZE=${{secrets.DATABASE_SYNCHRONIZE_STAGE}}

    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.GITOPS_DEPLOY_STAGE_TOKEN }}
        repository: team-xquare/xquare-gitops-repo-staging
        event-type: update_image
        client-payload: '{"ref": "${{ github.ref }}", 
                          "version": "${{ github.sha }}",
                          "service_name": "${{env.SERVICE_NAME}}",
                          "service_type": "${{env.SERVICE_TYPE}}"}'
